#summary USB communication library to use with WinUSB

In firmware the library resides above user's USB driver implementation and below user'application code. See the comments in [https://code.google.com/p/found-bits/source/browse/trunk/Sources/Projects/Libs/WinUSBComm/WinUSBComm.h WinUSBComm.h].
In general the USB implementation must call
{{{
void WinUSBComm_In();
}}}
after USB IN data packet was successfully sent and
{{{
void WinUSBComm_Out();
}}}
after USB OUT data packet was sent from host.
During these calls USB implementation will receive calls to:
{{{
void WinUSBComm_SetOutEndpointReady();
void WinUSBComm_ErrorOnOutEndpoint();
uint32_t WinUSBComm_GetNumBytesToReadFromOutEndpoint();
uint32_t WinUSBComm_ReadFromOutEndpoint(uint8_t *pbyData);
void WinUSBComm_SetInEndpointReady();
void WinUSBComm_ErrorOnInEndpoint();
void WinUSBComm_WriteToInEndpoint(uint8_t *pbyData, uint32_t dwByteCount);
}}}
In Set...Ready calls the state on endpoint must change to READY. In Error... calls the state on endpoint must change to STALL. Write and Read calls must transfer data to/from endpoints buffers.
USB implementation will also receive calls to:
{{{
uint32_t WinUSBComm_GetOutEndpointBufferSize();
uint32_t WinUSBComm_GetInEndpointBufferSize();
}}}
which must return endpoint buffer sizes.
The USB implementation must call
{{{
uint16_t WinUSBComm_Control(uint8_t byRequest, uint8_t **ppData);
}}}
when receives control requests for WinUSBComm interface. Function returns the length of data and pointer to data associated with request ID. It also changes the internal state of the WinUSBComm accordingly. The control requests are made up for library and defined in [https://code.google.com/p/found-bits/source/browse/trunk/Sources/Projects/Libs/WinUSBComm/WinUSBCommShared.h WinUSBCommShared.h]. The file is shared between host and device implementation.